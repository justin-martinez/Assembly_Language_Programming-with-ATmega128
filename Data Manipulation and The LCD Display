;***********************************************************
;*	Section 3_a
;*	DATA MANIPULATION AND THE LCD DISPLAY
;***********************************************************
;*	 Author: Justin Martinez
;*	   Date: 10/15/2015
;***********************************************************

.include "m128def.inc"			; Include definition file

;***********************************************************
;*	Internal Register Definitions and Constants
;***********************************************************
.def	mpr = r16				; Multipurpose register required for LCD Driver
.def	ReadCnt = r23			; Counter used to read data from Program Memory
.def	counter = r4			; Counter used for Bin2ASCII demo
.def	val = r5				; Value to be compared with
.def	TimerCnt = r6			; Counter used for the timer

.equ	CountAddr = $0130		; Address of ASCII counter text


;***********************************************************
;*	Start of Code Segment
;***********************************************************
.cseg							; Beginning of code segment

;-----------------------------------------------------------
; Interrupt Vectors
;-----------------------------------------------------------
.org	$0000					; Beginning of IVs
		rjmp INIT				; Reset interrupt

.org	$001e	
rjmp TIM0_OVF			; Timer0 Overflow Handler

.org	$0046					; End of Interrupt Vectors

;-----------------------------------------------------------
; Program Initialization
;-----------------------------------------------------------
INIT:							
		; The initialization routine	
		LDI R16, LOW(RAMEND)	; Low Byte of End SRAM Address {R0:R15}
		OUT SPL, R16			; Write byte to SPL

		LDI R16, HIGH(RAMEND)	; High Byte of End SRAM Address {R16:R31}
		OUT SPH, R16			; Write byte to SPH

		; Initialize LCD Display
		rcall	LCDInit			; INITIALIZE THE LCD DISPLAY						

		; Move strings from Program Memory to Data Memory
								; A while loop will go here
		

		; Write initial "Counter: " string to LCD line 1
		ldi		ZL, low(TXT0<<1); Init variable registers
		ldi		ZH, high(TXT0<<1)
		ldi		YL, low(LCDLn1Addr)
		ldi		YH, high(LCDLn1Addr)
		ldi		ReadCnt, LCDMaxCnt
INIT_LINE1:
		lpm		mpr, Z+			; Read Program memory
		st		Y+, mpr			; Store into memory
		dec		ReadCnt			; Decrement Read Counter
		brne	INIT_LINE1		; Continue untill all data is read
		rcall	LCDWrLn1		; WRITE LINE 1 DATA

		; Activate interrupts
		sei						; Turn on interrupts
;-----------------------------------------------------------
; Main Program
;-----------------------------------------------------------
MAIN:							; The Main program
		; Display the strings on the LCD Display
		ldi		ZL, low(TXT1<<1); Load Z pointer with address
		ldi		ZH,high(TXT1<<1); of Text message 1
		rcall	WriteText		; Write the Text Message
		
		rjmp	MAIN			; jump back to main and create an infinite
								; while loop.  Generally, every main program is an
								; infinite while loop, never let the main program
								; just run off

;***********************************************************
;*	Functions and Subroutines
;***********************************************************
WriteText:
		push	mpr				; Save the mpr register
		push	ReadCnt			; Save the ReadCounter
		rcall	LCDClrLn2		; CLEAR LINE 2 OF LCD
								; LOAD THE LCD MAX LINE COUNT (16)
		ldi		ReadCnt, LCDMaxCnt
								; LOAD THE Y POINTER WITH THE DATA
								; ADDRESS FOR LINE 2 DATA
		ldi		YL, low(LCDLn2Addr)
		ldi		YH, high(LCDLn2Addr)
WriteText_lp:					; Loop that reads the data
		lpm		mpr, Z+			; Read program data
		st		Y+, mpr			; Store data to memory
		dec		ReadCnt			; Decrement counter
		brne	WriteText_lp	; Loop untill all data is read
		rcall	LCDWrLn2		; WRITE DATA TO LINE 2
		pop		ReadCnt			; Restore the ReadCounter
		pop		mpr				; Restore the mpr register
		ret						; Return from function
;-----------------------------------------------------------
; Func: Template function header
; Desc: Cut and paste this and fill in the info at the 
;		beginning of your functions
;-----------------------------------------------------------
FUNC:							; Begin a function with a label
		; Save variable by pushing them to the stack

		; Execute the function here
		
		; Restore variable by popping them from the stack in reverse order\
		ret						; End a function with RET


;***********************************************************
;*	Stored Program Data
;***********************************************************

;----------------------------------------------------------
; An example of storing a string, note the preceeding and
; appending labels, these help to access the data
;----------------------------------------------------------
STRING_BEG:
.DB		"My Test String"		; Storing the string in Program Memory
STRING_END:

;***********************************************************
;*	Interrupt Service Routines
;***********************************************************

;***********************************************************
;* ISR:		Timer 0 Overflow Interrupt Handler
;* Desc:	This ISR will increment the counter and update
;*			line 1 of the LCD Display to reflect the value
;***********************************************************
TIM0_OVF:
		push	mpr				; Save the mpr
		in		mpr, SREG		; Save the SREG
		push	mpr				; 
		
		inc		TimerCnt		; Increment counter
		brne	TIM0_OVF_DONE	; If count is not 0, leave interrupt

		; Clear Data area
		ldi		XL, low(CountAddr)
		ldi		XH, high(CountAddr)
		ldi		count, 3		; Init X-ptr and count
		ldi		mpr, ' '		; Load mpr with space char
T0_L1:	st		X+, mpr			; Clear data area
		dec		count			; Decrement count
		brne	T0_L1			; Continue until all data is cleared

		; Convert binary counter to ASCII
		mov		mpr, counter	; MOVE DATA TO MPR FOR THE B2A CALL
								; SET THE INITIAL X-PTR ADDRESS
		ldi		XL, low(CountAddr)
		ldi		XH, high(CountAddr)
		rcall	Bin2ASCII		; CALL BIN2ASCII TO CONVERT DATA
								; NOTE, COUNT REG HOLDS HOW MANY CHARS WRITTEN
		
		; Write data to LCD display
		ldi		ReadCnt, 3		; always write three chars to overide existing data in LCD
		ldi		line, 1			; SET LINE TO 1 TO WRITE TO LINE 1
		ldi		count, 9		; SET COUNT TO 10 TO START WRITTING TO THE TENTH INDEX
T0_L2:	ld		mpr, X+			; LOAD MPR WITH DATA TO WRITE
		rcall	LCDWriteByte	; CALL LCDWRITEBYTE TO WRITE DATA TO LCD DISPLAY
		inc		count			; INCREMENT COUNT TO WRITE TO NEXT LCD INDEX
		dec		ReadCnt			; decrement read counter
		brne	T0_L2			; Countinue untill all data is written

		inc		counter			; Increment the counter for the next round

TIM0_OVF_DONE:
		pop		mpr				; Restore the SREG
		out		SREG, mpr		; 
		pop		mpr				; Restore the mpr
		reti					; Return from interrupt

;***********************************************************
;*	Data Definitions
;***********************************************************
TXT0:
.DB "Justin Martinez "
TXT1:
.DB "   Hello World  "

;***********************************************************
;*	Additional Program Includes
;***********************************************************
.include "LCDDriver.asm"		; Include the LCD Driver


