 ;* ECE_375_Section_5.asm
 ;*  Created: 11/3/2015 12:54:41 PM
 ;*   Author: martijus
 ;***********************************************************
;*	ECE 375 Lab 5 
;*	Simple Interrupts
;***********************************************************
;*	 Author: Justin Martinez
;*	   Date: 11/3/2015
;***********************************************************

.include "m128def.inc"			; Include definition file

;***********************************************************
;*	Internal Register Definitions and Constants
;***********************************************************
.def	mpr = r16				; Multipurpose register 
; Other register renames
.def	waitcnt = r17			;Wait Loop Counter
.def	ilcnt = r18			;Inner Loop Counter
.def	olcnt = r19			;Outer Loop Counter

; Constants for interactions such as
.equ	WskrR = 0				; Right Whisker Input Bit
.equ	WskrL = 1				; Left Whisker Input Bit
.equ	WaitTime = 100			; Wait 1 second

.equ	EngEnR = 4				; Right Engine Enable Bit
.equ	EngEnL = 7				; Left Engine Enable Bit
.equ	EngDirR = 5				; Right Engine Direction Bit
.equ	EngDirL = 6				; Left Engine Direction Bit

; Using the constants from above, create the movement 
; commands, Forwards, Backwards, Stop, Turn Left, and Turn Right
.equ	MovFwd = (1<<EngDirR|1<<EngDirL)	; Move Forwards Command
.equ	MovBck = $00						; Move Backwards Command
.equ	TurnR = (1<<EngDirL)				; Turn Right Command
.equ	TurnL = (1<<EngDirR)				; Turn Left Command
.equ	halt = (1<<EngEnR|1<<EngEnL)		; halt Command

;***********************************************************
;*	Start of Code Segment
;***********************************************************
.cseg							; Beginning of code segment

;-----------------------------------------------------------
; Interrupt Vectors
;-----------------------------------------------------------
.org	$0000					; Beginning of IVs
		rjmp 	INIT			; Reset interrupt

; Set up the interrupt vectors for the interrupts, 
.org	$0002					; Port D pin 0
		rcall HitRight
		reti

.org	$0004					; Port D pin 1
		rcall HitLeft
		reti

.org	$0046					; End of Interrupt Vectors

;-----------------------------------------------------------
; Program Initialization
;-----------------------------------------------------------
INIT:	; The initialization routine
		ldi		mpr, low(RAMEND)
		out		SPL, mpr		; Load SPL with low byte of RAMEND
		ldi		mpr, high(RAMEND)
		out		SPH, mpr		; Load SPH with high byte of RAMEND

		; Initialize Port B for output
		ldi		mpr, $00		; Initialize Port B for outputs
		out		PORTB, mpr		; Port B outputs low
		ldi		mpr, $FF		; Set Port B Directional Register
		out		DDRB, mpr		; for output

		; Initialize Port D for input
		ldi		mpr, $FF		; Initialize Port D for inputs
		out		PORTD, mpr		; with Tri-State
		ldi		mpr, $00		; Set Port D Directional Register
		out		DDRD, mpr		; for inputs

		; Initialize external interrupts
		ldi mpr, (1 <<ISC41)|(0 <<ISC40)|(1 <<ISC51)|(0 <<ISC50)	// ISC 4/5 {10 == the falling edge between two samples.}
        out EICRB, mpr
		; Set the Interrupt Sense Control to low level
		ldi mpr, $00												// ISCn1/0 {00 == The low level of INTn generates an interrupt request.
        sts EICRA, mpr												// INT21 {
		; NOTE: must initialize both EICRA and EICRB

		; Set the External Interrupt Mask
		ldi mpr, (1 <<INT1)|(1 <<INT0)								// INT0 == PortD == program address $0002, bit 0 ||||| INT1 == PortD == program address $0004 bit 1
        out EIMSK, mpr
		; Turn on interrupts
		sei
		; NOTE: This must be the last thing to do in the INIT function

;-----------------------------------------------------------
; Main Program
;-----------------------------------------------------------
MAIN:	; The Main program

		; Send command to Move Robot Forward 
		; That is all you should have in MAIN
		ldi		mpr, MovFwd		; Load Move Foward Command
		out		PORTB, mpr		; Send command to motors

		rjmp	MAIN			; Create an infinite while loop to signify the 
								; end of the program.

;***********************************************************
;*	Functions and Subroutines
;***********************************************************

;-----------------------------------------------------------
; You will probably need several functions, one to handle the 
; left whisker interrupt, one to handle the right whisker 
; interrupt, and maybe a wait function
;------------------------------------------------------------

;-----------------------------------------------------------
; Func: Template function header
; Desc: Cut and paste this and fill in the info at the 
;		beginning of your functions
;-----------------------------------------------------------
FUNC:	; Begin a function with a label

		; Save variable by pushing them to the stack

		; Execute the function here
		
		; Restore variable by popping them from the stack in reverse order

		ret		; End a function with RET

HitRight:						; defaults to $0002
		push	mpr				; Save mpr register
		push	waitcnt			; Save wait register
		in		mpr, SREG		; Save program state
		push	mpr				;

		; Move Backwards for a second
		ldi		mpr, MovBck			; Load Move Backwards command
		out		PORTB, mpr			; Send command to port
		ldi		waitcnt, WaitTime	; Wait for 1 second
		rcall	Wait				; Call wait function

		; Turn left for a second
		ldi		mpr, TurnL			; Load Turn Left Command
		out		PORTB, mpr			; Send command to port
		ldi		waitcnt, WaitTime	; Wait for 1 second
		rcall	Wait				; Call wait function
			
		; Move Forward again
		ldi		mpr, MovFwd		; Load Move Forwards command
		out		PORTB, mpr		; Send command to port

		pop		mpr				; Restore program state
		out		SREG, mpr		;
		pop		waitcnt			; Restore wait register
		pop		mpr				; Restore mpr
		ret						; Return from subroutine

HitLeft:						; defaults to $0004
		push	mpr				; Save mpr register
		push	waitcnt			; Save wait register
		in		mpr, SREG		; Save program state
		push	mpr				;

		; Move Backwards for a second
		ldi		mpr, MovBck			; Load Move Backwards command
		out		PORTB, mpr			; Send command to port
		ldi		waitcnt, WaitTime	; Wait for 1 second
		rcall	Wait				; Call wait function

		; Turn right for a second
		ldi		mpr, TurnR			; Load Turn Left Command
		out		PORTB, mpr			; Send command to port
		ldi		waitcnt, WaitTime	; Wait for 1 second
		rcall	Wait				; Call wait function

		; Move Forward again	
		ldi		mpr, MovFwd		; Load Move Forwards command
		out		PORTB, mpr		; Send command to port

		pop		mpr				; Restore program state
		out		SREG, mpr		;
		pop		waitcnt			; Restore wait register
		pop		mpr				; Restore mpr
		ret						; Return from subroutine

Wait:
		push	waitcnt			; Save wait register
		push	ilcnt			; Save ilcnt register
		push	olcnt			; Save olcnt register

Loop:	ldi		olcnt, 224		; load olcnt register
OLoop:	ldi		ilcnt, 237		; load ilcnt register
ILoop:	dec		ilcnt			; decrement ilcnt
		brne	ILoop			; Continue Inner Loop
		dec		olcnt			; decrement olcnt
		brne	OLoop			; Continue Outer Loop
		dec		waitcnt			; Decrement wait
		brne	Loop			; Continue Wait loop	

		pop		olcnt			; Restore olcnt register
		pop		ilcnt			; Restore ilcnt register
		pop		waitcnt			; Restore wait register
		ret						; Return from subroutine



;***********************************************************
;*	Stored Program Data
;***********************************************************

; Enter any stored data you might need here

;***********************************************************
;*	Additional Program Includes
;***********************************************************
; There are no additional file includes for this program
